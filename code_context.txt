// File: homepage.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>PoetGram - Home</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f4f7f6;
            color: #2c3e50;
            line-height: 1.6;
        }

        .nav-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 2px solid #3498db;
        }

        .logo {
            font-size: 28px;
            font-weight: 700;
            color: #2c3e50;
            letter-spacing: 1px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
        }

        .user-info button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            margin-left: 10px;
            border-radius: 25px;
            transition: all 0.3s ease;
            cursor: pointer;
            font-weight: 600;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .user-info button:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0,0,0,0.15);
        }

        .post-form {
            background-color: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 6px 12px rgba(0,0,0,0.1);
            margin-bottom: 25px;
        }

        .genre-buttons {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 20px;
        }

        .genre-buttons button {
            padding: 10px 15px;
            background-color: #ecf0f1;
            border: none;
            border-radius: 25px;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .genre-buttons button.selected {
            background-color: #2ecc71;
            color: white;
            transform: scale(1.05);
        }

        #postContent {
            width: 100%;
            height: 150px;
            padding: 15px;
            border: 2px solid #bdc3c7;
            border-radius: 8px;
            resize: vertical;
        }

        .posts-container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .post {
            background-color: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.08);
        }

        .post-actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
        }

        .post-actions button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 25px;
            transition: all 0.3s ease;
            cursor: pointer;
            margin: 0 5px;
        }

        .comments-container {
            margin-top: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 8px;
        }

        .comments-container p {
            background-color: white;
            padding: 10px;
            border-radius: 6px;
            margin: 5px 0;
        }
    </style>
</head>
<body>
    <nav class="nav-content">
        <div class="logo">PoetGram</div>
        <div class="user-info">
            <span id="currentUserDisplay" class="user-name"></span>
            <button onclick="showNewPostForm()">New Poem</button>
            <button onclick="logout()">Logout</button>
        </div>
    </nav>

    <div id="newPostForm" class="post-form" style="display: none;">
        <div class="genre-buttons">
            <button data-genre="Poetry" onclick="selectGenre(this)">Poetry</button>
            <button data-genre="Fiction" onclick="selectGenre(this)">Fiction</button>
            <button data-genre="Drama" onclick="selectGenre(this)">Drama</button>
            <button data-genre="Horror" onclick="selectGenre(this)">Horror</button>
            <button data-genre="Comedy" onclick="selectGenre(this)">Comedy</button>
        </div>
        <textarea id="postContent" placeholder="Write your piece here..."></textarea>
        <button onclick="submitPost()">Post</button>
    </div>

    <div id="postsContainer" class="posts-container">
        <!-- Posts will be dynamically loaded here -->
    </div>

    <script>
        let selectedGenre = null;

        document.addEventListener('DOMContentLoaded', () => {
            const currentUser = localStorage.getItem('currentUser');
            if (!currentUser) {
                window.location.href = 'login.html';
            } else {
                document.getElementById('currentUserDisplay').textContent = currentUser;
                loadPosts();
            }
        });

        function selectGenre(button) {
            document.querySelectorAll('.genre-buttons button').forEach(btn => 
                btn.classList.remove('selected')
            );
            
            button.classList.add('selected');
            selectedGenre = button.dataset.genre;
        }

        function showNewPostForm() {
            const form = document.getElementById('newPostForm');
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }

        async function loadPosts() {
            try {
                const response = await fetch('http://localhost:3000/posts');
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const posts = await response.json();
                
                const postsContainer = document.getElementById('postsContainer');
                postsContainer.innerHTML = ''; 

                if (posts.length === 0) {
                    postsContainer.innerHTML = '<p>No posts yet. Be the first to create one!</p>';
                    return;
                }

                posts.forEach(post => {
                    const postElement = document.createElement('div');
                    postElement.classList.add('post');
                    postElement.innerHTML = `
                        <h3>${post.username} - ${post.genre}</h3>
                        <p>${post.content}</p>
                        <div class="post-actions">
                            <span id="likes-${post.post_id}">Likes: ${post.likes}</span>
                            <div>
                                <button onclick="likePost(${post.post_id})">Like</button>
                                <button onclick="toggleCommentForm(${post.post_id})">Comment</button>
                            </div>
                        </div>
                        <div id="comment-form-${post.post_id}" class="comments-container" style="display:none;">
                            <textarea id="comment-text-${post.post_id}" placeholder="Write a comment..."></textarea>
                            <button onclick="submitComment(${post.post_id})">Submit Comment</button>
                            <div id="comments-${post.post_id}"></div>
                        </div>
                    `;
                    postsContainer.appendChild(postElement);
                    
                    loadComments(post.post_id);
                });
            } catch (error) {
                console.error('Error loading posts:', error);
                const postsContainer = document.getElementById('postsContainer');
                postsContainer.innerHTML = `<p>Error loading posts: ${error.message}</p>`;
            }
        }

        async function loadComments(postId) {
            try {
                const response = await fetch(`http://localhost:3000/comments/${postId}`);
                const comments = await response.json();

                const commentsContainer = document.getElementById(`comments-${postId}`);
                commentsContainer.innerHTML = ''; 

                if (comments.length === 0) {
                    commentsContainer.innerHTML = '<p>No comments yet.</p>';
                    return;
                }

                comments.forEach(comment => {
                    const commentElement = document.createElement('p');
                    commentElement.innerHTML = `
                        <strong>${comment.username}</strong>: ${comment.comment}
                    `;
                    commentsContainer.appendChild(commentElement);
                });
            } catch (error) {
                console.error('Error loading comments:', error);
            }
        }

        function toggleCommentForm(postId) {
            const commentForm = document.getElementById(`comment-form-${postId}`);
            commentForm.style.display = commentForm.style.display === 'none' ? 'block' : 'none';
        }

        async function submitPost() {
            const content = document.getElementById('postContent').value.trim();
            const currentUser = localStorage.getItem('currentUser');

            if (!selectedGenre || !content) {
                alert('Please select a genre and write something!');
                return;
            }

            try {
                const response = await fetch('http://localhost:3000/post', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        genre: selectedGenre,
                        content: content,
                        likes: 0,
                        username: currentUser
                    })
                });

                if (response.ok) {
                    document.getElementById('postContent').value = '';
                    document.getElementById('newPostForm').style.display = 'none';
                    
                    selectedGenre = null;
                    document.querySelectorAll('.genre-buttons button').forEach(btn => 
                        btn.classList.remove('selected')
                    );
                    
                    loadPosts();
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Failed to post');
                }
            } catch (error) {
                console.error('Network error:', error);
                alert('Network error: Please check your connection');
            }
        }

        async function submitComment(postId) {
            const commentText = document.getElementById(`comment-text-${postId}`).value.trim();
            const currentUser = localStorage.getItem('currentUser');

            if (!commentText) {
                alert('Please write a comment');
                return;
            }

            try {
                const response = await fetch('http://localhost:3000/comment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        postId, 
                        username: currentUser, 
                        comment: commentText 
                    })
                });

                if (response.ok) {
                    document.getElementById(`comment-text-${postId}`).value = '';
                    loadComments(postId);
                } else {
                    const errorData = await response.json();
                    alert(errorData.message || 'Failed to submit comment');
                }
            } catch (error) {
                console.error('Error submitting comment:', error);
                alert('Network error: Please try again');
            }
        }

        async function likePost(postId) {
            try {
                const response = await fetch('http://localhost:3000/like', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ postId })
                });

                if (response.ok) {
                    const likesElement = document.getElementById(`likes-${postId}`);
                    const currentLikes = parseInt(likesElement.textContent.split(': ')[1]);
                    likesElement.textContent = `Likes: ${currentLikes + 1}`;
                }
            } catch (error) {
                console.error('Error liking post:', error);
                alert('Failed to like post');
            }
        }

        function logout() {
            localStorage.removeItem('currentUser');
            window.location.href = 'login.html';
        }
    </script>
</body>
</html>
// File: login.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>PoetGram - Login/Signup</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            color: #333;
        }

        .auth-container {
            width: 100%;
            max-width: 400px;
            padding: 20px;
        }

        .auth-box {
            background: white;
            border-radius: 12px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            padding: 30px;
            text-align: center;
            transition: transform 0.3s ease;
        }

        .auth-box:hover {
            transform: scale(1.02);
        }

        .logo {
            font-family: 'Pacifico', cursive;
            font-size: 2.5rem;
            color: #667eea;
            margin-bottom: 20px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group input {
            width: 90%;
            padding: 12px;
            margin: 5px;
            border: 1px solid #e1e1e1;
            border-radius: 6px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(to right, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        button:hover {
            opacity: 0.9;
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .switch-form {
            color: #667eea;
            cursor: pointer;
            font-weight: bold;
            transition: color 0.3s ease;
        }

        .switch-form:hover {
            color: #764ba2;
            text-decoration: underline;
        }

        .error-message {
            color: #ff4444;
            margin-bottom: 15px;
            display: none;
        }

        .success-message {
            color: #00C851;
            margin-bottom: 15px;
            display: none;
        }
    </style>
</head>
<body>
    <div class="auth-container">
        <div id="loginForm" class="auth-box">
            <div class="logo">PoetGram</div>
            
            <div class="form-group">
                <input type="text" id="loginUsername" placeholder="Username" required>
                <input type="password" id="loginPassword" placeholder="Password" required>
            </div>
            
            <div id="loginError" class="error-message"></div>
            
            <button onclick="login()">Log In</button>
            
            <div style="text-align: center; margin-top: 15px;">
                Don't have an account? 
                <span class="switch-form" onclick="toggleForms()">Sign up</span>
            </div>
        </div>

        <div id="signupForm" class="auth-box" style="display: none;">
            <div class="logo">PoetGram</div>
            
            <div class="form-group">
                <input type="text" id="signupUsername" placeholder="Choose Username" required>
                <input type="password" id="signupPassword" placeholder="Choose Password" required>
                <input type="password" id="confirmPassword" placeholder="Confirm Password" required>
            </div>
            
            <div id="signupError" class="error-message"></div>
            <div id="signupSuccess" class="success-message"></div>
            
            <button onclick="signup()">Sign Up</button>
            
            <div style="text-align: center; margin-top: 15px;">
                Have an account? 
                <span class="switch-form" onclick="toggleForms()">Log in</span>
            </div>
        </div>
    </div>

    <script>
        function toggleForms() {
            const loginForm = document.getElementById('loginForm');
            const signupForm = document.getElementById('signupForm');
            
            if (loginForm.style.display === 'none') {
                loginForm.style.display = 'block';
                signupForm.style.display = 'none';
            } else {
                loginForm.style.display = 'none';
                signupForm.style.display = 'block';
            }
            
            // Clear error messages and inputs
            document.getElementById('loginError').textContent = '';
            document.getElementById('signupError').textContent = '';
            document.getElementById('signupSuccess').textContent = '';
            document.getElementById('loginUsername').value = '';
            document.getElementById('loginPassword').value = '';
            document.getElementById('signupUsername').value = '';
            document.getElementById('signupPassword').value = '';
            document.getElementById('confirmPassword').value = '';
        }

        async function login() {
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;
            const errorElement = document.getElementById('loginError');

            if (!username || !password) {
                errorElement.textContent = 'Please enter username and password';
                errorElement.style.display = 'block';
                return;
            }

            try {
                const response = await fetch('http://localhost:3000/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (response.ok) {
                    // Successful login, redirect to homepage
                    localStorage.setItem('currentUser', username);
                    window.location.href = 'homepage.html';
                } else {
                    errorElement.textContent = data.message || 'Login failed';
                    errorElement.style.display = 'block';
                }
            } catch (error) {
                errorElement.textContent = 'Network error. Please try again.';
                errorElement.style.display = 'block';
            }
        }

        async function signup() {
            const username = document.getElementById('signupUsername').value;
            const password = document.getElementById('signupPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            const errorElement = document.getElementById('signupError');
            const successElement = document.getElementById('signupSuccess');

            // Validate inputs
            if (!username || !password || !confirmPassword) {
                errorElement.textContent = 'Please fill in all fields';
                errorElement.style.display = 'block';
                successElement.style.display = 'none';
                return;
            }

            if (password !== confirmPassword) {
                errorElement.textContent = 'Passwords do not match';
                errorElement.style.display = 'block';
                successElement.style.display = 'none';
                return;
            }

            // Basic password strength check
            if (password.length < 6) {
                errorElement.textContent = 'Password must be at least 6 characters long';
                errorElement.style.display = 'block';
                successElement.style.display = 'none';
                return;
            }

            try {
                const response = await fetch('http://localhost:3000/signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ username, password })
                });

                const data = await response.json();

                if (response.ok) {
                    successElement.textContent = 'Account created successfully!';
                    successElement.style.display = 'block';
                    errorElement.style.display = 'none';
                    
                    // Optionally auto-login or show login form
                    setTimeout(() => {
                        toggleForms();
                        document.getElementById('loginUsername').value = username;
                    }, 1500);
                } else {
                    errorElement.textContent = data.message || 'Signup failed';
                    errorElement.style.display = 'block';
                    successElement.style.display = 'none';
                }
            } catch (error) {
                errorElement.textContent = 'Network error. Please try again.';
                errorElement.style.display = 'block';
                successElement.style.display = 'none';
            }
        }
    </script>
</body>
</html>
// File: poetgram-backend/db.js
// db.js - Database Connection Configuration
const mysql = require('mysql2/promise');

const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',     // Replace with your MySQL username
    password: 'VQjXb&wt%@sx%6jQou5@nwz$Yo', // Replace with your MySQL password
    database: 'Poem',
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});

module.exports = pool;
// File: poetgram-backend/dbOperations.js
// dbOperations.js - Database CRUD Operations
const pool = require('./db');

class DatabaseOperations {

    static async createUser(username, password, followers = 0, ratings = 0) {
        try {
            // Hash the password before storing
            const hashedPassword = await PasswordUtils.hashPassword(password);
            
            const [result] = await pool.execute(
                'INSERT INTO User (username, password, followers, ratings) VALUES (?, ?, ?, ?)',
                [username, hashedPassword, followers, ratings]
            );
            return result;
        } catch (error) {
            console.error('Error creating user:', error);
            throw error;
        }
    }

    // Authenticate User
    static async authenticateUser(username, password) {
        try {
            const [rows] = await pool.execute(
                'SELECT * FROM User WHERE username = ?', 
                [username]
            );

            if (rows.length === 0) {
                return false;
            }

            // Compare provided password with stored hash
            const isMatch = await PasswordUtils.comparePassword(
                password, 
                rows[0].password
            );

            return isMatch;
        } catch (error) {
            console.error('Authentication error:', error);
            throw error;
        }
    }

    // Check if Username Exists
    static async checkUsernameExists(username) {
        try {
            const [rows] = await pool.execute(
                'SELECT * FROM User WHERE username = ?', 
                [username]
            );
            return rows.length > 0;
        } catch (error) {
            console.error('Username check error:', error);
            throw error;
        }
    }
    // User Operations
    static async createUser(username, followers = 0, ratings = 0) {
        try {
            const [result] = await pool.execute(
                'INSERT INTO User (username, followers, ratings) VALUES (?, ?, ?)',
                [username, followers, ratings]
            );
            return result;
        } catch (error) {
            console.error('Error creating user:', error);
            throw error;
        }
    }

    static async getUserByUsername(username) {
        try {
            const [rows] = await pool.execute(
                'SELECT * FROM User WHERE username = ?', 
                [username]
            );
            return rows[0];
        } catch (error) {
            console.error('Error fetching user:', error);
            throw error;
        }
    }

    // Post Operations
    // Update createPost method in dbOperations.js
    static async createPost(genre, content, likes, username, titleId = null) {
        try {
            // Validate inputs
            if (!genre || !content || !username) {
                throw new Error('Genre, content, and username are required');
            }
    
            // Sanitize inputs
            const sanitizedGenre = genre.trim();
            const sanitizedContent = content.trim();
            const sanitizedUsername = username.trim();
    
            // Use execute instead of query, and destructure the result
            const result = await pool.execute(
                'INSERT INTO Posts (genre, content, likes, username, title_id) VALUES (?, ?, ?, ?, ?)',
                [sanitizedGenre, sanitizedContent, likes || 0, sanitizedUsername, titleId]
            );
            console.log('Post created:', result[0].insertId);
    
            // The result is an array where the first element contains the actual result
            return result;
        } catch (error) {
            console.error('Error creating post:', error);
            throw error;
        }
    }

    static async addComment(postId, username, comment) {
        try {
            console.log('ithe: ',postId, username, comment);
            // Validate inputs
            if (!postId || !username || !comment) {
                throw new Error('Post ID, username, and comment are required');
            }
            console.log('ithe: ',postId, username, comment);
    
            const result = await pool.execute(
                'INSERT INTO Comments (post_id, username, comment) VALUES (?, ?, ?)',
                [postId, username, comment]
            );
            console.log('Commen:', result);
            console.log('Comment added:', result[0].insertId);
            return result[0].insertId;
        } catch (error) {
            console.error('Error adding comment:', error);
            throw error;
        }
    }
    // Add method to get comments for a post
    static async getCommentsByPostId(postId) {
        try {
            const rows = await pool.execute(
                'SELECT * FROM Comments WHERE post_id = ? ORDER BY comment_id DESC', 
                [postId]
            );
            console.log('Comments:', rows);
            return rows[0];
        } catch (error) {
            console.error('Error fetching comments:', error);
            throw error;
        }
    }

    // Add method to like a post
    static async likePost(postId) {
        try {
            const [result] = await pool.execute(
                'UPDATE Posts SET likes = likes + 1 WHERE post_id = ?',
                [postId]
            );
            return result;
        } catch (error) {
            console.error('Error liking post:', error);
            throw error;
        }
    }

    static async getPosts() {
        try {
            const rows = await pool.execute('SELECT * FROM Posts');
            return rows;
        } catch (error) {
            console.error('Error fetching posts:', error);
            throw error;
        }
    }

    // Comment Operations

    // Authentication Operations
    static async authenticateUser(username) {
        try {
            const [rows] = await pool.execute(
                'SELECT * FROM User WHERE username = ?', 
                [username]
            );
            return rows.length > 0;
        } catch (error) {
            console.error('Authentication error:', error);
            throw error;
        }
    }

    static async getPosts() {
        try {
            const [rows] = await pool.execute('SELECT * FROM Posts ORDER BY created_at DESC');
            return rows;
        } catch (error) {
            console.error('Error fetching posts:', error);
            throw error;
        }
    }
}

module.exports = DatabaseOperations;
// File: poetgram-backend/passwordUtils.js
// passwordUtils.js
const bcrypt = require('bcryptjs');

class PasswordUtils {
    // Hash password before storing
    static async hashPassword(password) {
        const saltRounds = 10;
        return await bcrypt.hash(password, saltRounds);
    }

    // Verify password
    static async comparePassword(inputPassword, storedHash) {
        return await bcrypt.compare(inputPassword, storedHash);
    }
}

module.exports = PasswordUtils;
// File: poetgram-backend/server.js
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const DatabaseOperations = require('./dbOperations');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Authentication Routes
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    
    // Input validation
    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required' });
    }

    try {
        const isAuthenticated = await DatabaseOperations.authenticateUser(username, password);
        
        if (isAuthenticated) {
            res.status(200).json({ message: 'Login successful', username });
        } else {
            res.status(401).json({ message: 'Invalid credentials' });
        }
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Server error' });
    }
});

app.post('/signup', async (req, res) => {
    const { username, password } = req.body;
    
    // Input validation
    if (!username || !password) {
        return res.status(400).json({ message: 'Username and password are required' });
    }

    // Password strength check (basic example)
    if (password.length < 6) {
        return res.status(400).json({ message: 'Password must be at least 6 characters long' });
    }

    try {
        // Check if username already exists
        const usernameExists = await DatabaseOperations.checkUsernameExists(username);
        
        if (usernameExists) {
            return res.status(409).json({ message: 'Username already exists' });
        }

        // Create user
        await DatabaseOperations.createUser(username, password);
        
        res.status(201).json({ message: 'User created successfully', username });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'Error creating user' });
    }
});

// Add this route in server.js
app.post('/post', async (req, res) => {
    const { genre, content, likes, username } = req.body;
    
    try {
        const postId = await DatabaseOperations.createPost(genre, content, likes, username);
        
        res.status(201).json({ 
            message: 'Post created successfully', 
            postId: postId  // This will be the new post's ID
        });
    } catch (error) {
        console.error('Post creation error:', error);
        res.status(500).json({ message: 'Error creating post', details: error.message });
    }
});

// Add this route in server.js
app.get('/posts', async (req, res) => {
    try {
        const posts = await DatabaseOperations.getPosts();
        res.status(200).json(posts);
    } catch (error) {
        console.error('Error fetching posts:', error);
        res.status(500).json({ message: 'Error retrieving posts' });
    }
});
// Route to add a comment
app.post('/comment', async (req, res) => {
    const { postId, username, comment } = req.body;
    
    if (!postId || !username || !comment) {
        return res.status(400).json({ message: 'Post ID, username, and comment are required' });
    }
    console.log(postId, username, comment);

    try {
        const result = await DatabaseOperations.addComment(postId, username, comment);
    
        console.log('Comment added:', result);
        res.status(201).json({ 
            message: 'Comment added successfully', 
            commentId: result
        });
    } catch (error) {
        console.error('Comment creation error:', error);
        res.status(500).json({ message: 'Error adding comment' });
    }
});

// Route to get comments for a post
app.get('/comments/:postId', async (req, res) => {
    const { postId } = req.params;
    console.log('postId:', postId);

    try {
        const comments = await DatabaseOperations.getCommentsByPostId(postId);
        res.status(200).json(comments);
    } catch (error) {
        console.error('Error fetching comments:', error);
        res.status(500).json({ message: 'Error retrieving comments' });
    }
});

// Route to like a post
app.post('/like', async (req, res) => {
    const { postId } = req.body;
    
    if (!postId) {
        return res.status(400).json({ message: 'Post ID is required' });
    }

    try {
        const result = await DatabaseOperations.likePost(postId);
        res.status(200).json({ message: 'Post liked successfully' });
    } catch (error) {
        console.error('Like post error:', error);
        res.status(500).json({ message: 'Error liking post' });
    }
});

// Start Server
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

module.exports = app;
